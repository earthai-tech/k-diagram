
import os
import pytest
from kdiagram.datasets.load import load_zhongshan_subsidence, load_uncertainty_data
from kdiagram.api.bunch import Bunch
import pandas as pd
import numpy as np

@pytest.fixture
def mock_load_zhongshan_subsidence(mocker):
    # Mock get_data to return the correct directory
    mocker.patch("kdiagram.datasets.load.get_data",
                 return_value=os.path.join(
                     os.path.dirname(__file__),
                    'kdiagram', 'datasets', 'data'))

    # Mock the file download path
    mocker.patch("kdiagram.datasets.load.download_file_if",
                 return_value=os.path.join(
                     os.path.dirname(__file__), 'kdiagram', 
                     'datasets', 'data', 'min_zhongshan.csv'))
    
    # Mock the package resource path
    mocker.patch("kdiagram.datasets.load.resources.files", 
                 return_value=os.path.join(os.path.dirname(__file__),
                                           'kdiagram', 'datasets', 'data')
                 )
def test_load_zhongshan_subsidence_local():
    """Test loading Zhongshan subsidence dataset from local cache."""
    result = load_zhongshan_subsidence(as_frame=True)
    
    # Check that the result is a DataFrame
    assert isinstance(result, pd.DataFrame)
    
    # Check that specific columns exist (e.g., 'longitude' and 'latitude')
    assert "longitude" in result.columns
    assert "latitude" in result.columns

def test_load_zhongshan_subsidence_invalid_years():
    """Test loading Zhongshan subsidence dataset with invalid years."""
    # Requesting invalid years (e.g., years not present in dataset)
    result = load_zhongshan_subsidence(years=[2030, 2040], as_frame=True)
    
    # Ensure warning is raised, and the DataFrame is returned
    assert isinstance(result, pd.DataFrame)
    # Check if the correct years are filtered in the dataset
    assert not all(year in result.columns for year in [2022, 2023])

def test_load_zhongshan_subsidence_with_quantiles():
    """Test loading Zhongshan subsidence dataset with specific quantiles."""
    result = load_zhongshan_subsidence(quantiles=[0.1, 0.9], as_frame=True)
    
    # Check if the expected quantile columns are present
    assert 'subsidence_2022_q0.1' in result.columns
    assert 'subsidence_2022_q0.9' in result.columns

def test_load_zhongshan_subsidence_no_coords():
    """Test loading Zhongshan subsidence dataset excluding coordinates."""
    result = load_zhongshan_subsidence(include_coords=False, as_frame=True)
    
    # Ensure the coordinates columns are not included
    assert "longitude" not in result.columns
    assert "latitude" not in result.columns

def test_load_uncertainty_data():
    """Test generating synthetic uncertainty data."""
    result = load_uncertainty_data(n_samples=10, as_frame=True)
    
    # Check that result is a pandas DataFrame
    assert isinstance(result, pd.DataFrame)
    
    # Check that the columns generated include expected 
    # ones like 'location_id' and quantiles
    assert "location_id" in result.columns
    assert "value_actual" in result.columns
    assert "value_2022_q0.1" in result.columns
    assert "value_2022_q0.9" in result.columns

def test_load_uncertainty_data_anomalies():
    """Test synthetic data with anomalies."""
    result = load_uncertainty_data(n_samples=10, anomaly_frac=0.2, as_frame=True)
    
    # Check if anomalies are generated by verifying values 
    # outside the expected range
    actual_values = result["value_actual"].values
    q10_values = result["value_2022_q0.1"].values
    q90_values = result["value_2022_q0.9"].values
    
    # Ensure that some actual values fall outside the Q10-Q90 range
    assert np.any(actual_values < q10_values)
    assert np.any(actual_values > q90_values)

def test_load_uncertainty_data_invalid_parameters():
    """Test load uncertainty data with invalid parameters."""
    with pytest.raises(ValueError):
        # Invalid number of samples
        load_uncertainty_data(n_samples=-10, as_frame=True)  

    with pytest.raises(ValueError):
        # Invalid anomaly fraction (> 1)
        load_uncertainty_data(anomaly_frac=1.5, as_frame=True)  

def test_load_zhongshan_subsidence_force_download(
        mock_load_zhongshan_subsidence):
    """Test forcing download of the Zhongshan subsidence dataset."""
    result = load_zhongshan_subsidence(
        force_download=True, as_frame=True)
    
    # Ensure the result is a DataFrame after forced download
    assert isinstance(result, pd.DataFrame)

def test_load_uncertainty_data_bunch():
    """Test if the synthetic uncertainty data is returned as Bunch."""
    result = load_uncertainty_data(n_samples=10, as_frame=False)
    
    # Check if the result is a Bunch object
    assert isinstance(result, Bunch)
    
    # Ensure attributes like 'frame' and 'quantile_cols' exist in Bunch
    assert hasattr(result, 'frame')
    assert hasattr(result, 'quantile_cols')



if __name__ == "__main__": # pragma : no-cover
    pytest.main([__file__])

