# .github/workflows/python-package-conda.yml
name: Python Package (k-diagram)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-test-linux:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]  # test minimum + latest you support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Miniforge (Miniforge3)
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Miniforge3  # Updated from Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: kdiagram-dev
          environment-file: environment.yml
          python-version: ${{ matrix.python-version }}
          # NOTE: intentionally omit auto-activate-base to avoid alias warning

      - name: Show conda info
        run: |
          conda info
          conda list

      - name: Install k-diagram (no deps; conda handled them)
        run: |
          python -m pip install . --no-deps --force-reinstall

      - name: Lint (flake8 or ruff)
        run: |
          echo "Running flake8 linter..."
          # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # flake8 . --count --exit-zero --max-complexity=12 --max-line-length=88 --statistics
          # If you switch to Ruff:
      
          python -m pip install -e .[dev]
          # Use ruff to check for issues (no --fix argument here)
          ruff check .
          black . --check # Automatically formats the code
          ruff --fix .  # Automatically fix issues

      - name: Test with pytest + coverage
        run: |
          echo "Running pytest with coverage..."
          pytest -n auto --cov=kdiagram --cov-report=xml --cov-report=term-missing tests/

      - name: Upload coverage to Codecov
        # Run unless it's a PR from a fork AND ensure a token is present
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # This is the correct way to reference secrets
          files: ./coverage.xml                 # default path from pytest-cov
          name: linux-py${{ matrix.python-version }}
          flags: unittests
          fail_ci_if_error: true

      - name: Print Debug Info on Failure
        if: failure()
        run: |
          echo "::group::Debug Information"
          echo "PATH=$PATH"
          conda info
          conda list
          echo "::endgroup::"
